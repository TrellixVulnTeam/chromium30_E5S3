<!--
  -- Copyright (c) 2013 The Chromium Authors. All rights reserved.
  -- Use of this source code is governed by a BSD-style license that can be
  -- found in the LICENSE file.
  -->

<polymer-element name="kb-keyboard" on-key-over="keyOver" on-key-up="keyUp"
    on-key-down="keyDown" on-key-longpress="keyLongpress" on-pointerup="up"
    on-enable-dbl="enableDbl" attributes="keyset layout rows">
  <template>
    <style>
      @host {
        * {
          position: relative;
        }
      }
    </style>
    <!-- The ID for a keyset follows the naming convention of combining the
      -- layout name with a base keyset name. This convention is used to
      -- allow multiple layouts to be loaded (enablign fast switching) while
      -- allowing the shift and spacebar keys to be common across multiple
      -- keyboard layouts.
      -->
    <content select="#{{layout}}-{{keyset}}"></content>
  </template>
  <script>
    /**
     * The repeat delay in milliseconds before a key starts repeating. Use the
     * same rate as Chromebook.
     * (See chrome/browser/chromeos/language_preferences.cc)
     * @const
     * @type {number}
     */
    var REPEAT_DELAY_MSEC = 500;

    /**
     * The repeat interval or number of milliseconds between subsequent
     * keypresses. Use the same rate as Chromebook.
     * @const
     * @type {number}
     */
    var REPEAT_INTERVAL_MSEC = 50;

    /**
     * The double click/tap interval.
     * @const
     * @type {number}
     */
    var DBL_INTERVAL_MSEC = 300;

    /**
     * The boolean to decide if keyboard should transit to upper case keyset
     * when spacebar is pressed. If a closing punctuation is followed by a
     * spacebar, keyboard should automatically transit to upper case.
     * @type {boolean}
     */
    var enterUpperOnSpace = false;

    /**
     * A structure to track the currently repeating key on the keyboard.
     */
    var repeatKey = {
      /**
        * The timer for the delay before repeating behaviour begins.
        * @type {number|undefined}
        */
      timer: undefined,

      /**
       * The interval timer for issuing keypresses of a repeating key.
       * @type {number|undefined}
       */
      interval: undefined,

      /**
       * The key which is currently repeating.
       * @type {BaseKey|undefined}
       */
      key: undefined,

      /**
       * Cancel the repeat timers of the currently active key.
       */
      cancel: function() {
        clearTimeout(this.timer);
        clearInterval(this.interval);
        this.timer = undefined;
        this.interval = undefined;
        this.key = undefined;
      }
    };

    Polymer('kb-keyboard', {
      lastPressedKey: null,
      voiceInput_: null,
      dblDetail_: null,
      dblTimer_: null,

      ready: function() {
        this.voiceInput_ = new VoiceInput(this);
      },

      /**
       * When double click/tap event is enabled, the second key-down and key-up
       * events on the same key should be skipped. Return true when the event
       * with |detail| should be skipped.
       * @param {Object} detail The detail of key-up or key-down event.
       */
      skipEvent: function(detail) {
        if (this.dblDetail_) {
          if (this.dblDetail_.char != detail.char) {
            // The second key down is not on the same key. Double click/tap
            // should be ignored.
            this.dblDetail_ = null;
            clearTimeout(this.dblTimer_);
          } else if (this.dblDetail_.clickCount == 1) {
            return true;
          }
        }
        return false;
      },

      /**
       * Handles key-down event that is sent by kb-key-base.
       * @param {CustomEvent} event The key-down event dispatched by
       *     kb-key-base.
       * @param {Object} detail The detail of pressed kb-key.
       */
      keyDown: function(event, detail) {
        if (this.skipEvent(detail))
          return;

        if (this.lastPressedKey)
          this.lastPressedKey.classList.remove('active');
        this.lastPressedKey = event.target;
        this.lastPressedKey.classList.add('active');
        repeatKey.cancel();
        var toKeyset = detail.toKeyset;
        if (toKeyset) {
          this.keyset = toKeyset;
          this.querySelector('#' + this.layout + '-' + this.keyset).nextKeyset =
              detail.nextKeyset;
          return;
        }

        if (detail.repeat) {
          insertText(detail.char);
          repeatKey.key = this.lastPressedKey;
          repeatKey.timer = setTimeout(function() {
            repeatKey.timer = undefined;
            repeatKey.interval = setInterval(function() {
               insertText(detail.char);
            }, REPEAT_INTERVAL_MSEC);
          }, Math.max(0, REPEAT_DELAY_MSEC - REPEAT_INTERVAL_MSEC));
        }
      },

      /**
       * Enable/start double click/tap event recognition.
       * @param {CustomEvent} event The enable-dbl event dispatched by
       *     kb-shift-key.
       * @param {Object} detail The detail of pressed kb-shift-key.
       */
      enableDbl: function(event, detail) {
        if (!this.dblDetail_) {
          this.dblDetail_ = detail;
          this.dblDetail_.clickCount = 0;
          var self = this;
          this.dblTimer_ = setTimeout(function() {
            self.dblDetail_ = null;
          }, DBL_INTERVAL_MSEC);
        }
      },

      /**
       * Handles pointerup event. This is used for double tap/click events.
       * @param {PointerEvent} event The pointerup event that bubbled to
       *     kb-keyboard.
       */
      up: function(event) {
        if(this.dblDetail_) {
          this.dblDetail_.clickCount++;
          if (this.dblDetail_.clickCount == 2) {
            this.keyset = this.dblDetail_.toKeyset;
            var keysetId = '#' + this.layout + '-' + this.keyset
            this.querySelector(keysetId).nextKeyset = this.dblTimer_.nextKeyset;
            clearTimeout(this.dblTimer_);
            this.dblDetail_ = null;
          }
        }
      },

      /**
       * Handles key-up event that is sent by kb-key-base.
       * @param {CustomEvent} event The key-up event dispatched by kb-key-base.
       * @param {Object} detail The detail of pressed kb-key.
       */
      keyUp: function(event, detail) {
        if (this.skipEvent(detail))
          return;

        this.lastPressedKey.classList.remove('active');
        if (this.lastPressedKey != event.target)
          return;
        if (repeatKey.key == event.target) {
          repeatKey.cancel();
          return;
        }
        var toKeyset = detail.toKeyset;
        // Keyset transition key.
        if (toKeyset) {
          this.keyset = toKeyset;
          this.querySelector('#' + this.layout + '-' + this.keyset).nextKeyset =
              detail.nextKeyset;
        }
        var toLayout = detail.toLayout;
        // Layout transition key.
        if (toLayout)
          this.layout = toLayout;
        var char = detail.char;
        if (enterUpperOnSpace) {
          enterUpperOnSpace = false;
          if (char == ' ')
            this.keyset = 'upper';
        }
        switch(char) {
          case 'Invalid':
          case 'Shift':
            return;
          case 'Microphone':
            this.voiceInput_.onDown();
            return;
          case '.':
          case '?':
          case '!':
            enterUpperOnSpace = true;
            break;
          default:
            break;
        }
        insertText(char);
      },

      /*
       * Handles key-longpress event that is sent by kb-key-base.
       * @param {CustomEvent} event The key-longpress event dispatched by
       *     kb-key-base.
       * @param {Object} detail The detail of pressed key.
       */
      keyLongpress: function(event, detail) {
        var toKeyset = detail.toKeyset;
        // Keyset transtion key.
        if (toKeyset) {
          this.keyset = toKeyset;
          this.querySelector('#' + this.layout + '-' + this.keyset).nextKeyset =
              detail.nextKeyset;
          // Makes last pressed key inactive if transit to a new keyset on long
          // press.
          this.lastPressedKey.classList.remove('active');
        }
      },

      /**
       * Handles a change in the keyboard layout.  Auto-selects the default
       * keyset for the new layout.
       */
      layoutChanged: function() {
        if (!this.selectDefaultKeyset()) {
          // Keyset selection fails if the keysets have not been loaded yet.
          var keysets = document.querySelector('#' + this.layout);
          if (keysets) {
            keyboard.appendChild(flattenKeysets(keysets.content));
            this.selectDefaultKeyset();
          } else {
            console.error('Unable to find layout ' + this.layout);
          }
        }
      },

      /**
       * Selects the default keyset for a layout.
       * @return {boolean} True if successful.  This method can fail if the
       *     keysets corresponding to the layout have not been injected.
       */
      selectDefaultKeyset: function() {
        var keysets = this.querySelectorAll('kb-keyset');
        // Full name of the keyset is of the form 'layout-keyset'.
        var regex = new RegExp('^' + this.layout + '-(.+)');
        var keysetsLoaded = false;
        for (var i = 0; i < keysets.length; i++) {
          var matches = keysets[i].id.match(regex);
          if (matches && matches.length == 2) {
             keysetsLoaded = true;
             if (keysets[i].isDefault) {
               this.keyset = matches[1];
               return true;
             }
          }
        }
        if (keysetsLoaded)
          console.error('No default keyset found for ' + this.layout);
        return false;
      }
    });
  </script>
</polymer-element>

